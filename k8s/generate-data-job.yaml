apiVersion: batch/v1
kind: Job
metadata:
  name: generate-data-job
  namespace: mynamespace
spec:
  template:
    spec:
      containers:
      - name: data-generator
        image: bitnami/python:3.12
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pg-cluster-postgresql-ha-postgresql
              key: password
        command: ["sh", "-c"]
        args:
          - |
            pip install psycopg2-binary faker &&
            echo "üîÑ Running data generation script..."

            python3 - <<EOF
            import psycopg2
            import os
            from faker import Faker
            import random

            # PostgreSQL connection details
            DB_HOST = "pg-cluster-postgresql-ha-pgpool.mynamespace.svc.cluster.local"
            DB_PORT = "5432"
            DB_NAME = "pesalink_db"
            DB_USER = "postgres"

            # ‚úÖ Get password from environment variable (fixes fe_sendauth error)
            DB_PASSWORD = os.getenv("POSTGRES_PASSWORD")

            fake = Faker()
            fake.unique.clear()
            used_phones = set()

            try:
                print("üîÑ Connecting to PostgreSQL...")
                conn = psycopg2.connect(
                    host=DB_HOST, port=DB_PORT, database=DB_NAME, user=DB_USER, password=DB_PASSWORD
                )
                cur = conn.cursor()
                print("‚úÖ Connected to PostgreSQL.")

                cur.execute("SELECT COUNT(*) FROM users;")
                user_count = cur.fetchone()[0]

                if user_count >= 100000:
                    print("‚ö†Ô∏è User limit reached. No new users inserted.")
                else:
                    remaining_users = 100000 - user_count
                    print(f"üîÑ Generating {remaining_users} users...")

                    user_batch = []
                    for _ in range(remaining_users):
                        email = fake.unique.email()
                        phone = f"254{random.randint(100000000, 999999999)}"
                        while phone in used_phones:
                            phone = f"254{random.randint(100000000, 999999999)}"
                        used_phones.add(phone)
                        user_batch.append((fake.name(), email, phone))

                    cur.executemany("INSERT INTO users (name, email, phone) VALUES (%s, %s, %s)", user_batch)
                    conn.commit()

                    print(f"‚úÖ Successfully inserted {remaining_users} users!")

            except psycopg2.OperationalError as db_err:
                print(f"‚ùå Database Connection Error: {db_err}")
            except Exception as e:
                print(f"‚ùå Unexpected Error: {e}")
            finally:
                if 'cur' in locals():
                    cur.close()
                if 'conn' in locals():
                    conn.close()
                    print("üîå PostgreSQL connection closed.")
            EOF
      restartPolicy: Never
